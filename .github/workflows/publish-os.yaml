name: 'ðŸš€ Publish OS Packages'

on:
  push:
    branches:
      - master
      - main
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  build-packages:
    name: Build Server Packages
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        build-config:
          - centos.amd64
          - fedora.amd64
          - debian.amd64
          - debian.arm64
          - debian.armhf
          - ubuntu.amd64
          - ubuntu.arm64
          - ubuntu.armhf
          - linux.amd64
          - linux.amd64-musl
          - linux.arm64
          - linux.armhf
          - windows.amd64
          - macos
          - portable
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Env
        run: |-
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build Packaging Container
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: jellyfin-server
          tags: ${{ matrix.build-config }}
          oci: true
          dockerfiles: deployment/Dockerfile.${{ matrix.build-config }}

      - name: Run Packaging Container (stable)
        if: ${{ github.event_name == 'release' }}
        run: |-
          mkdir -p deployment/dist
          podman run --rm \
            -v $(pwd)/deployment/dist:/dist \
            -v $(pwd):/jellyfin \
            -e IS_UNSTABLE="no" \
            -e BUILD_ID=${{ env.SHORT_SHA }} \
            jellyfin-server:${{ matrix.build-config }}

      - name: Run Packaging Container (unstable)
        if: ${{ github.event_name != 'release' }}
        run: |-
          mkdir -p deployment/dist
          podman run --rm \
            -v $(pwd)/deployment/dist:/dist \
            -v $(pwd):/jellyfin \
            -e IS_UNSTABLE="yes" \
            -e BUILD_ID=${{ env.SHORT_SHA }} \
            jellyfin-server:${{ matrix.build-config }}

      - name: Publish Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jellyfin-server-${{ matrix.build-config }}
          path: deployment/dist


      # TODO: migrate bits of 'collect-server-artefacts' script into this ci
      - name: Create Target Directory on Repository Server
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script_stop: true
          script: mkdir -p /srv/repository/incoming/gh-actions/${{ env.SHORT_SHA }}/${{ matrix.build-config }}

      - name: Upload Packaging Artifacts to Repository Server
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -vrptz
          path: deployment/dist/
          remote_path: /srv/repository/incoming/gh-actions/${{ env.SHORT_SHA }}/${{ matrix.build-config }}
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}

    # TODO: add stage tat dls all artifacts and publishes them to a GH release + SHA256sum collection file
