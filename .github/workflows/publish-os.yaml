name: 'ðŸš€ Publish OS Packages'

on:
  push:
    branches:
      - master
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  setup-vars:
    name: Setup Variables
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'jellyfin/jellyfin' }}

    outputs:
      short-sha: steps.variables.outputs.short-sha
      version: steps.variables.outputs.version
      stage: steps.variables.outputs.stage

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup YQ
        uses: chrisdickinson/setup-yq@latest
        with:
          yq-version: v4.9.8

      - name: Setup variables
        id: variables
        run: |-
          if [[ "${GITHUB_REF}" =~ '^refs/tags/v.*$' ]]; then
            STAGE='stable'
          fi

          VERSION=`yq e '.version' build.yaml`
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=stage::${STAGE:-unstable}"
          echo "::set-output name=short-sha::${GITHUB_SHA::7}"

  build-packages:
    name: Build Server Packages
    runs-on: ubuntu-latest
    needs:
      - setup-vars

    strategy:
      fail-fast: false
      matrix:
        build-config:
          - centos.amd64
          - fedora.amd64
          - debian.amd64
          - debian.arm64
          - debian.armhf
          - ubuntu.amd64
          - ubuntu.arm64
          - ubuntu.armhf
          - linux.amd64
          - linux.amd64-musl
          - linux.arm64
          - linux.armhf
          - windows.amd64
          - macos
          - portable

    env:
      SHORT_SHA: ${{ needs.setup-vars.outputs.short-sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build packaging container
        uses: redhat-actions/buildah-build@v2
        with:
          image: jellyfin-server
          tags: ${{ matrix.build-config }}
          oci: true
          dockerfiles: deployment/Dockerfile.${{ matrix.build-config }}

      - name: Run packaging container (stable)
        if: ${{ github.event_name == 'release' }}
        run: |-
          mkdir -p deployment/dist
          podman run --rm \
            -v $(pwd)/deployment/dist:/dist \
            -v $(pwd):/jellyfin \
            -e IS_UNSTABLE="no" \
            -e BUILD_ID=${{ env.SHORT_SHA }} \
            jellyfin-server:${{ matrix.build-config }}

      - name: Run packaging container (unstable)
        if: ${{ github.event_name != 'release' }}
        run: |-
          mkdir -p deployment/dist
          podman run --rm \
            -v $(pwd)/deployment/dist:/dist \
            -v $(pwd):/jellyfin \
            -e IS_UNSTABLE="yes" \
            -e BUILD_ID=${{ env.SHORT_SHA }} \
            jellyfin-server:${{ matrix.build-config }}

      - name: Publish artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jellyfin-server-${{ matrix.build-config }}
          path: deployment/dist

      - name: Create Target Directory on Repository Server
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script_stop: true
          script: mkdir -p /srv/repository/incoming/gh-actions/${{ env.SHORT_SHA }}/${{ matrix.build-config }}

      - name: Upload Packaging Artifacts to Repository Server
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -vrptz
          path: deployment/dist/
          remote_path: /srv/repository/incoming/gh-actions/${{ env.SHORT_SHA }}/${{ matrix.build-config }}
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}

  trigger-meta:
    name: Triger Meta Package builds
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - setup-vars
      - build-packages

    env:
      SHORT_SHA: ${{ needs.setup-vars.outputs.short-sha }}
      VERSION: ${{ needs.setup-vars.outputs.version }}
      STAGE: ${{ needs.setup-vars.outputs.stage }}

    steps:
      - name: Run OS package collect script
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script_stop: true
          script: |-
            nohup sudo /srv/repository/collect-server.os-packs.sh \
              /srv/repository/incoming/gh-actions \
              ${{ env.SHORT_SHA }} \
              ${{ env.VERSION }} \
              ${{ env.STAGE }} &

  # UpForDiscussion: add stage that dls all artifacts and publishes them to a GH release + SHA256sum collection file
