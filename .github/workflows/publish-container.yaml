name: 'ðŸš€ Publish Container Images'

on:
  push:
    branches:
      - master
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  setup-vars:
    name: Setup Variables
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'jellyfin/jellyfin' }}

    outputs:
      stage: steps.variables.outputs.stage
      short-sha: steps.variables.outputs.short-sha
      major-minor: steps.variables.outputs.major-minor
      version: steps.variables.outputs.version
      year-week: steps.variables.outputs.year-week

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup YQ
        uses: chrisdickinson/setup-yq@latest
        with:
          yq-version: v4.9.8

      - name: Setup sariables
        id: variables
        run: |-
          if [[ "${GITHUB_REF}" =~ '^refs/tags/v.*$' ]]; then
            STAGE='stable'
          fi

          VERSION=`yq e '.version' build.yaml`
          echo "::set-output name=stage::${STAGE:-unstable}"
          echo "::set-output name=short-sha::${GITHUB_SHA::7}"
          echo "::set-output name=major-minor::${VERSION%.*}"
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=year-week::$(date -u '+%Y%W')"

  container-image:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs:
      - setup-vars

    strategy:
      fail-fast: false
      matrix:
        include:
          - image-tag: amd64
            image-config: amd64
            build-config: linux-x64
          - image-tag: arm64
            image-config: arm64
            build-config: linux-arm64
          - image-tag: armhf
            image-config: arm32
            build-config: linux-arm

    env:
      STAGE: ${{ needs.setup-vars.outputs.stage }}
      SHORT_SHA: ${{ needs.setup-vars.outputs.short-sha }}
      MAJOR_MINOR: ${{ needs.setup-vars.outputs.major-minor }}
      SEMVER: ${{ needs.setup-vars.outputs.version }}
      YEAR_WEEK: ${{ needs.setup-vars.outputs.year-week }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .Net
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Install qemu dependency
        run: |-
          sudo apt-get update
          sudo apt-get install -y qemu-user-static

      - name: Setup build dependencies chache
        uses: actions/cache@v2
        if: ${{ github.event_name != 'release' }}
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ env.YEAR_WEEK }}

      - name: Build server against OS arch
        run: |-
          mkdir -p ci-artifact
          dotnet publish Jellyfin.Server \
            --nologo \
            --disable-parallel \
            --configuration Release \
            --output ci-artifact \
            --self-contained \
            --runtime ${{ matrix.build-config }} \
            "-p:DebugSymbols=false;DebugType=none"

      - name: Build headles server image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: jellyfin-server
          tags: >-
            ${{ env.STAGE }}-${{ matrix.image-tag }}
            ${{ env.STAGE }}-${{ env.MAJOR_MINOR }}-${{ matrix.image-tag }}
            ${{ env.STAGE }}-${{ env.SEMVER }}-${{ matrix.image-tag }}
            ${{ env.SHORT_SHA }}-${{ matrix.image-tag }}
          oci: true
          arch: ${{ matrix.image-config }}
          dockerfiles: deployment/Dockerfile.docker.${{ matrix.image-tag }}
          context: ci-artifact
          build-args: |-
            JELLYFIN_VERSION=${{ env.SEMVER }}

      - name: Publish headles server image to ghcr.io
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ghcr.io/${{ github.repository_owner }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Publish headles server image to quay.io
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: quay.io/jellyfin
          username: jellyfin+github_actions
          password: ${{ secrets.RH_TOKEN }}

      - name: Publish headles server image to docker.io
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: docker.io/jellyfin
          username: jellyfin
          password: ${{ secrets.DH_TOKEN }}

  trigger-meta:
    name: Triger Meta Container Image builds
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - setup-vars
      - container-image

    env:
      SHORT_SHA: ${{ needs.setup-vars.outputs.short-sha }}
      MAJOR_MINOR: ${{ needs.setup-vars.outputs.major-minor }}
      SEMVER: ${{ needs.setup-vars.outputs.version }}
      STAGE: ${{ needs.setup-vars.outputs.stage }}

    steps:
      - name: Run OS package collect script
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script_stop: true
          script: |-
            nohup sudo /srv/repository/collect-server.container.sh \
              ${{ env.SHORT_SHA }} \
              ${{ env.MAJOR_MINOR }} \
              ${{ env.SEMVER }} \
              ${{ env.STAGE }} &
